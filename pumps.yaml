packages:
  pump_1: !include pump_1.yaml
  pump_2: !include pump_2.yaml

globals:
  - id: pumps_enabled
    type: bool
    restore_value: yes
    initial_value: "false" 
    
  - id: pump_is_on
    type: bool
    restore_value: no
    initial_value: "false" 
  
  - id: single_activation_is_on
    type: bool
    restore_value: no
    initial_value: "false" 
    
  - id: pump_automation_is_on
    type: bool
    restore_value: yes
    initial_value: "false"  
    
switch:   
  - platform: template
    name: ${device_name_upper}.enable
    id: ${device_name}_enable
    lambda: |-
       if (id(pumps_enabled) == true)
         return true;
       else
         return false;
    turn_on_action:
      then:
        - globals.set:
            id: pumps_enabled
            value: "true"
    turn_off_action:
      then:
        - globals.set:
            id: pumps_enabled
            value: "false" 
        - switch.turn_off: ${device_name}_automation
        - switch.turn_off: ${device_name}_activate
        - switch.turn_off: ${device_name}_single_activation
  
  - platform: template
    name: ${device_name_upper}.activate
    id: ${device_name}_activate
    internal: true
    lambda: |-
       if (id(pump_is_on) == true)
         return true;
       else
         return false;
    turn_on_action:
      then:
        - lambda: |-
            if (id(pumps_enabled) == true)
            {
              id(${device_name}_pump_1).turn_on();
              id(${device_name}_pump_2).turn_on();
              id(pump_is_on) = true;
            }
            else
            {
              id(${device_name}_pump_1).turn_off();
              id(${device_name}_pump_2).turn_off();
              id(pump_is_on) = false;
            }
    turn_off_action:
      then:
        - lambda: |-
            id(${device_name}_pump_1).turn_off();
            id(${device_name}_pump_2).turn_off();
            id(pump_is_on) = false;
  
  - platform: template
    name: ${device_name_upper}.single_activation
    id: ${device_name}_single_activation
    lambda: |-
       if (id(single_activation_is_on) == true)
         return true;
       else
         return false;
    turn_on_action:
      then:
        if:
          condition:
            lambda: |-
              if(id(pumps_enabled) == true)
                return true;
              else
                return false;
          then:
              - lambda: |-
                  id(${device_name}_activate).turn_on();
                  id(single_activation_is_on) = true;
              - delay: !lambda "return id(${device_name}_duration).state * 1000;"
              - lambda: |-
                  id(${device_name}_activate).turn_off();
                  id(single_activation_is_on) = false;
          else:
              - lambda: |-
                 id(single_activation_is_on) = false;
    turn_off_action:
      then:
        - lambda: |-
            id(${device_name}_activate).turn_off();
            id(single_activation_is_on) = false;
  
  - platform: template
    name: ${device_name_upper}.automation
    id: ${device_name}_automation
    icon: mdi:water-pump
    lambda: |-
       if (id(pump_automation_is_on) == true)
         return true;
       else
         return false;
    turn_on_action:
      then:
        - globals.set:
            id: pump_automation_is_on
            value: "true"
    turn_off_action:
      then:
        - switch.turn_off: ${device_name}_activate
        - globals.set:
            id: pump_automation_is_on
            value: "false"

number:
  - platform: template
    min_value: "0"
    max_value: ${pump_duration_max}
    step: "1"
    id: ${device_name}_duration
    name: ${device_name_upper}.duration
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${pump_duration_initial}
    update_interval: "10s"
    unit_of_measurement: "s"
  
  - platform: template
    min_value: "1"
    max_value: ${pump_interval_max}
    step: "1"
    id: ${device_name}_interval
    name: ${device_name_upper}.interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${pump_interval_initial}
    update_interval: "10s"
    unit_of_measurement: "s"

script:
  - id: ${device_name}_automation_script
    then:
    - while:
        condition:
          lambda: |-
            if(id(pump_automation_is_on) == true &&
               id(pumps_enabled) == true)
                return true;
            else
                return false;
        then:
          - switch.turn_on: ${device_name}_single_activation
          - delay: !lambda "return id(${device_name}_interval).state * 1000;"

         
interval:
  - interval: 60 s
    then:
      - if:
          condition:
            not:
              api.connected:
          then:
            lambda: |-
              if (id(boot_finished))
              {
                id(${device_name}_enable).turn_off();
                id(${device_name}_activate).turn_off();
                id(${device_name}_automation).turn_off();
                id(${device_name}_single_activation).turn_off();
              }
        
  - interval: 1 s
    then:
      - if:
          condition:
            lambda: |-
              if(id(${device_name}_automation_script).is_running() == false &&
                 id(pump_automation_is_on) == true &&
                 id(pumps_enabled) == true)
                return true;
              else
                return false;
          then:
            - script.execute: ${device_name}_automation_script